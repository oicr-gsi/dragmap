## Commands
This section lists command(s) run by dragmap workflow

* Running dragmap

=== Ensures the read-group information is valid, and in the correct format prior to running the rest of the workflow ===.

```
        fieldNames=("ID=" "LB=" "PL=" "PU=" "SM=" "CN=" "DS=" "DT=" "FO=" "KS=" "PG=" "PI=" "PM=") 
        
        # Split the string into an array 
        IFS=, read -ra readFields <<< ~{readGroups}

        for field in "${readFields[@]}"; do 
            tag=${field:0:3}
            validTag=false
            for name in "${fieldNames[@]}"; do
                if [ "$tag" == "$name" ]; then
                    validTag=true
                fi
            done 
            if ! $validTag; then
                # Redirect error message to stderr
                echo "Invalid tag: '$tag'" >&2  
                exit 1
            fi
        done 
```

=== Parallelizes the alignment by splitting the fastq files into chunks. Subsequent steps will be run on the fastq chunks (Optional) ===.

```
        if [ -z "~{numReads}" ]; then
            totalLines=$(zcat ~{fastqR1} | wc -l)
        else totalLines=$((~{numReads}*4))
        fi
        
        python3 -c "from math import ceil; print (int(ceil(($totalLines/4.0)/~{numChunk})*4))"
        slicer -i ~{fastqR} -l ~{chunkSize} --gzip 
```

=== Trims off the UMI bases (Optional) ===.

```
        barcodex-rs --umilist ~{umiList} --prefix ~{outputPrefix} --separator "__" inline \
        --pattern1 '~{pattern1}' --r1-in ~{fastq1} \
        ~{if (defined(fastq2)) then "--pattern2 '~{pattern2}' --r2-in ~{fastq2} " else ""}

        cat ~{outputPrefix}_UMI_counts.json > umiCounts.txt

        tr [,] ',\n' < umiCounts.txt | sed 's/[{}]//' > tmp.txt
        echo "{$(sort -i tmp.txt)}" > new.txt
        tr '\n' ',' < new.txt | sed 's/,$//' > ~{outputPrefix}_UMI_counts.json
```

=== Trims off adapter sequence (Optional) ===.

```
        cutadapt -q ~{trimMinQuality} \
                -m ~{trimMinLength} \
                -a ~{adapter1} \
                -o ~{resultFastqR1} \
                ~{if (defined(fastqR2)) then "-A ~{adapter2} -p ~{resultFastqR2} " else ""} \
                ~{if (doUMItrim) then "-u ~{umiLength} -U ~{umiLength} " else ""} \
                ~{addParam} \
                ~{fastqR1} \
                ~{fastqR2} > ~{resultLog}
```

=== Align to reference using Dragmap ===.

```
        dragen-os \
            -r ~{dragmapHashTable} \
            -1 ~{read1s} \
            ~{if (defined(read2s)) then "-2 ~{read2s}" else ""} \
            ~{addParam} \
        | \
        samtools view -b -o ~{resultBam} -
```

=== Merge parallelized alignments (if the fastq was split) and sort the BAM file ===.

```
        mkdir -p ~{tmpDir}

        samtools merge -O bam - ~{sep=" " bams} \
        | \
        samtools sort -O bam -T ~{tmpDir} -o ~{resultMergedBam} - 
```

=== Assigns read-groups and index BAM file ===.

```
        # An array containing potential read-group fields
        fieldNames=("ID=" "LB=" "PL=" "PU=" "SM=" "CN=" "DS=" "DT=" "FO=" "KS=" "PG=" "PI=" "PM=")

        # Declares an associative array and appends the values of the fields present in readGroups string
        declare -A fieldsArray
        
        for field in "${fieldNames[@]}"; do
            if [[ ~{readGroups} == *${field}* ]]; then 
                fieldsArray[${field}]=$(echo ~{readGroups} | awk -F "${field}" '{print $2}' | cut -d ',' -f 1) 
            fi
        done

        java -jar picard.jar AddOrReplaceReadGroups \
            CREATE_INDEX=true \
            I= ~{outputBam} \
            O= ~{resultReadGroupBam} \
            $( [[ -v fieldsArray["ID="] ]] && echo "RGID=${fieldsArray["ID="]}" || : ) \
            $( [[ -v fieldsArray["LB="] ]] && echo "RGLB=${fieldsArray["LB="]}" || : ) \
            $( [[ -v fieldsArray["PL="] ]] && echo "RGPL=${fieldsArray["PL="]}" || : ) \
            $( [[ -v fieldsArray["PU="] ]] && echo "RGPU=${fieldsArray["PU="]}" || : ) \
            $( [[ -v fieldsArray["SM="] ]] && echo "RGSM=${fieldsArray["SM="]}" || : ) \
            $( [[ -v fieldsArray["CN="] ]] && echo "RGCN=${fieldsArray["CN="]}" || : ) \
            $( [[ -v fieldsArray["DS="] ]] && echo "RGDS=${fieldsArray["DS="]}" || : ) \
            $( [[ -v fieldsArray["DT="] ]] && echo "RGDT=${fieldsArray["DT="]}" || : ) \
            $( [[ -v fieldsArray["FO="] ]] && echo "RGFO=${fieldsArray["FO="]}" || : ) \
            $( [[ -v fieldsArray["KS="] ]] && echo "RGKS=${fieldsArray["KS="]}" || : ) \
            $( [[ -v fieldsArray["PG="] ]] && echo "RGPG=${fieldsArray["PG="]}" || : ) \
            $( [[ -v fieldsArray["PI="] ]] && echo "RGPI=${fieldsArray["PI="]}" || : ) \
            $( [[ -v fieldsArray["PM="] ]] && echo "RGPM=${fieldsArray["PM="]}" || : )
```

=== Merges parallelized adapter trimming logs ===.

```
        COMMANDS NOT SHOWN, see WDL for details
```
